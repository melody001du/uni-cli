{
  // "extends": "@tsconfig/node20/tsconfig.json",
  "include": [
    "index.ts",
    "pluginDriver/**/*"
  ],
  "exclude": [
    "node_modules/**/*",
    "dist/**/*"
  ],
  "compilerOptions": {
    "lib": [
      "DOM",
      "DOM.Iterable",
      "ESNext"
    ], // 指定编译过程中将包含哪些库的类型定义
    "target": "es2016", // 对输出代码进行语法特性的转换
    "module": "ESNext", // 输出代码使用的模块格式
    "moduleResolution": "bundler", // Ts 编译器如何查找模块，比如使用 import 或 require 语句时，Ts 编译器应该如何查找和定位模块文件
    "esModuleInterop": true, // 兼容 import 语法导入一个 CommonJS 模块，会添加一些辅助代码
    "strict": false, // 不严格校验，比如 any
    "resolveJsonModule": true, // 可以直接导入 JSON 模块
    "forceConsistentCasingInFileNames": true, // 文件名严格大小写
    "skipLibCheck": true, // 跳过 lib.d.ts 类型定义文件 的检查，主要是第三方库
    "allowJs": true, // 允许对 Js 文件进行类型检查和更现代的语言构造
    "allowSyntheticDefaultImports": true, //允许从没有默认导出的模块中使用默认导入
    "isolatedModules": true, // 每一个文件应该能够单独编译，而不需要去考虑其他文件
    // "jsx": "react-jsx" // 使用 JSX 时不用再自动插入 React 的导入语句，特别是在那些 React 不是唯一库或不是直接导入的项目中
    "noEmit": true, // 阻止 TypeScript 编译器产生输出文件，比如只想利用 TypeScript 进行类型检查，然后使用 Babel 来处理 TypeScript 到 JavaScript 的转译
    "incremental": true, // 启用增量编译
    "verbatimModuleSyntax": true, // 导入导出类型时必须添加 type 关键字
    "noUnusedLocals": true, // 检查未使用的局部变量
    "noUnusedParameters": true, // 检查未使用的参数
    "noImplicitOverride": true, // 子类覆盖父类方法必须添加 override 关键字
    "noUncheckedIndexedAccess": true, // 禁止越界访问
    "allowUnreachableCode": false, // 禁止有不可访问的代码
    "experimentalDecorators": true
    // "paths": { // alias 路径映射
    //   "@/*": ["src/*"]
    // }
    // "types": ["node", "jest", "express"], 告诉 TypeScript 编译器只包含 Node.js、Jest 和 Express 的类型声明，并忽略 node_modules/@types 文件夹下的其他类型声明文件。
  }
}
